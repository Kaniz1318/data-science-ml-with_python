# -*- coding: utf-8 -*-
"""Assignment (Mod 3).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ria89kN_GX5fxBqKRz5cJ09oiIQ9yku-

1. Create a Python class called Car with a default constructor that sets brand = "Unknown" and color = "White", and a parameterized constructor that accepts brand and color from the user. Add a method display_info() to print the details of the car.
"""

class Car:
    # Default constructor
    def __init__(self, brand="Unknown", color="White"):
        self.brand = brand
        self.color = color

    # Method to display car details
    def display_info(self):
        print(f"Car Brand: {self.brand}")
        print(f"Car Color: {self.color}")

# Example usage:

# Using default constructor
car1 = Car()
car1.display_info()
print()  # Blank line for separation

# Using parameterized constructor
car2 = Car("Toyota", "Red")
car2.display_info()

"""2. Write a program to demonstrate single inheritance by creating a base class Animal with a method speak(), and a derived class Dog that overrides the speak() method to print "Woof Woof!"."""

# Base class
class Animal:
    def speak(self):
        print("Some generic animal sound")

# Derived class
class Dog(Animal):
    def speak(self):
        print("Woof Woof!")

# Example usage
animal = Animal()
animal.speak()  # Output: Some generic animal sound

dog = Dog()
dog.speak()     # Output: Woof Woof!

"""3. Demonstrate polymorphism by creating a class MathOperation with a method add() that can add either two numbers or three numbers (method overloading). Then create another class AdvancedMath that inherits from MathOperation and overrides the add() method to perform multiplication instead of addition."""

# Base class
class MathOperation:
    # Method to add 2 or 3 numbers
    def add(self, a, b, c=None):
        if c is not None:
            return a + b + c
        else:
            return a + b

# Derived class
class AdvancedMath(MathOperation):
    # Override add() method to perform multiplication instead
    def add(self, a, b, c=None):
        if c is not None:
            return a * b * c
        else:
            return a * b

# Example usage
math_op = MathOperation()
print("Addition of 2 numbers:", math_op.add(5, 10))          # Output: 15
print("Addition of 3 numbers:", math_op.add(2, 3, 4))        # Output: 9

adv_math = AdvancedMath()
print("Multiplication of 2 numbers:", adv_math.add(5, 10))  # Output: 50
print("Multiplication of 3 numbers:", adv_math.add(2, 3, 4))# Output: 24